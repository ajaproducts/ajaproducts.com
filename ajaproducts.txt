import { useState, useEffect } from "react";

export default function App() {
  const [cart, setCart] = useState([]);
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [activeCategory, setActiveCategory] = useState("all");
  const [searchTerm, setSearchTerm] = useState("");
  const [notification, setNotification] = useState({ show: false, message: "" });

  // Mock product data based on ajaproducts.com content
  const products = [
    {
      id: 1,
      name: "Smart Watch",
      price: 2200,
      salePrice: 2200,
      originalPrice: 4400,
      category: "hot-selling",
      image: "https://placehold.co/400x300?text=Smart+Watch",
    },
    {
      id: 2,
      name: "Premium Smart Watch",
      price: 4400,
      salePrice: 4400,
      originalPrice: 6600,
      category: "hot-selling",
      image: "https://placehold.co/400x300?text=Smart+Watch+Pro",
    },
    {
      id: 3,
      name: "Wireless Headset",
      price: 3400,
      salePrice: 3400,
      originalPrice: 6000,
      category: "hot-selling",
      image: "https://placehold.co/400x300?text=Headphones",
    },
    {
      id: 4,
      name: "Pink Wireless Earbuds",
      price: 2200,
      salePrice: 2200,
      originalPrice: 2500,
      category: "hot-selling",
      image: "https://placehold.co/400x300?text=Earbuds+Pink",
    },
    {
      id: 5,
      name: "Stylish Air Buds",
      price: 1799,
      salePrice: 1799,
      originalPrice: 3000,
      category: "air-buds",
      image: "https://placehold.co/400x300?text=Air+Buds",
    },
    {
      id: 6,
      name: "Bluetooth Earphones",
      price: 2499,
      salePrice: 2499,
      originalPrice: 8500,
      category: "air-buds",
      image: "https://placehold.co/400x300?text=Bluetooth+Earphones",
    },
    {
      id: 7,
      name: "Noise-Canceling Headset",
      price: 2999,
      salePrice: 2999,
      originalPrice: 7000,
      category: "air-buds",
      image: "https://placehold.co/400x300?text=Headset",
    },
    {
      id: 8,
      name: "Casual Smart Watch",
      price: 4000,
      salePrice: 4000,
      originalPrice: 10000,
      category: "casual-watches",
      image: "https://placehold.co/400x300?text=Casual+Watch",
    },
    {
      id: 9,
      name: "Classic Digital Watch",
      price: 2999,
      salePrice: 2999,
      originalPrice: 5500,
      category: "casual-watches",
      image: "https://placehold.co/400x300?text=Digital+Watch",
    },
    {
      id: 10,
      name: "Modern Smart Watch",
      price: 2200,
      salePrice: 2200,
      originalPrice: 4400,
      category: "electronics",
      image: "https://placehold.co/400x300?text=Smart+Watch",
    },
    {
      id: 11,
      name: "Wireless Speaker",
      price: 3400,
      salePrice: 3400,
      originalPrice: 6000,
      category: "electronics",
      image: "https://placehold.co/400x300?text=Speaker",
    },
    {
      id: 12,
      name: "Home Lighting Set",
      price: 2200,
      salePrice: 2200,
      originalPrice: 4400,
      category: "home-kitchen",
      image: "https://placehold.co/400x300?text=Lighting+Set",
    },
    {
      id: 13,
      name: "Pink Kettle",
      price: 1500,
      salePrice: 1500,
      originalPrice: 2500,
      category: "home-kitchen",
      image: "https://placehold.co/400x300?text=Pink+Kettle",
    },
    {
      id: 14,
      name: "White Coffee Maker",
      price: 3200,
      salePrice: 3200,
      originalPrice: 8000,
      category: "home-kitchen",
      image: "https://placehold.co/400x300?text=Coffee+Maker",
    },
    {
      id: 15,
      name: "Multifunctional Cooker",
      price: 2999,
      salePrice: 2999,
      originalPrice: 6000,
      category: "home-kitchen",
      image: "https://placehold.co/400x300?text=Cooker",
    },
  ];

  // Filtered products based on search and category
  const filteredProducts = products.filter((product) => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = activeCategory === "all" || product.category === activeCategory;
    return matchesSearch && matchesCategory;
  });

  // Add to cart functionality with notification
  const addToCart = (product) => {
    const existingItem = cart.find((item) => item.id === product.id);
    if (existingItem) {
      setCart(
        cart.map((item) =>
          item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
        )
      );
    } else {
      setCart([...cart, { ...product, quantity: 1 }]);
    }
    showNotification(`Added "${product.name}" to your cart`);
  };

  // Remove item from cart
  const removeFromCart = (id) => {
    setCart(cart.filter((item) => item.id !== id));
    showNotification("Product removed from cart");
  };

  // Increase quantity
  const increaseQuantity = (id) => {
    setCart(
      cart.map((item) =>
        item.id === id ? { ...item, quantity: item.quantity + 1 } : item
      )
    );
  };

  // Decrease quantity
  const decreaseQuantity = (id) => {
    setCart(
      cart
        .map((item) =>
          item.id === id
            ? { ...item, quantity: item.quantity > 1 ? item.quantity - 1 : 1 }
            : item
        )
        .filter((item) => item.quantity > 0)
    );
  };

  // Calculate total price in cart
  const cartTotal = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);

  // Notification handler
  const showNotification = (message) => {
    setNotification({ show: true, message });
    setTimeout(() => {
      setNotification({ show: false, message: "" });
    }, 3000);
  };

  // Close cart when clicking outside
  useEffect(() => {
    const handleOutsideClick = (e) => {
      if (isCartOpen && !e.target.closest(".cart-container")) {
        setIsCartOpen(false);
      }
    };
    document.addEventListener("click", handleOutsideClick);
    return () => document.removeEventListener("click", handleOutsideClick);
  }, [isCartOpen]);

  return (
    <div className="min-h-screen bg-gray-50 font-sans text-gray-800">
      {/* Notification Toast */}
      {notification.show && (
        <div className="fixed top-4 right-4 z-50 bg-green-500 text-white px-4 py-2 rounded shadow-lg animate-fade-in-down transition duration-300 flex items-center space-x-2">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M5 13l4 4L19 7"
            />
          </svg>
          <span>{notification.message}</span>
        </div>
      )}

      {/* Header */}
      <header className="bg-white shadow-sm sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <a href="#" className="flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-8 w-8 mr-2"
              viewBox="0 0 200 200"
              fill="none"
              stroke="currentColor"
            >
              <rect x="20" y="40" width="160" height="120" rx="10" fill="black" />
              <path d="M20 40 H180 V160 H20 Z" fill="transparent" stroke="white" strokeWidth="20" />
              <path d="M100 20 C100 10 100 10 100 20 Z" fill="black" />
              <text x="50" y="100" fontSize="100" fontFamily="Arial" fill="white" textAnchor="middle">
                AJA
              </text>
            </svg>
          </a>

          <div className="hidden md:flex items-center space-x-8">
            <nav className="flex space-x-6">
              <button
                onClick={() => setActiveCategory("all")}
                className={`text-sm font-medium hover:text-indigo-600 transition ${
                  activeCategory === "all" ? "text-indigo-600 font-semibold" : "text-gray-600"
                }`}
              >
                All Products
              </button>
              <button
                onClick={() => setActiveCategory("hot-selling")}
                className={`text-sm font-medium hover:text-indigo-600 transition ${
                  activeCategory === "hot-selling" ? "text-indigo-600 font-semibold" : "text-gray-600"
                }`}
              >
                Hot Selling
              </button>
              <button
                onClick={() => setActiveCategory("casual-watches")}
                className={`text-sm font-medium hover:text-indigo-600 transition ${
                  activeCategory === "casual-watches" ? "text-indigo-600 font-semibold" : "text-gray-600"
                }`}
              >
                Casual & Smart Watches
              </button>
              <button
                onClick={() => setActiveCategory("air-buds")}
                className={`text-sm font-medium hover:text-indigo-600 transition ${
                  activeCategory === "air-buds" ? "text-indigo-600 font-semibold" : "text-gray-600"
                }`}
              >
                Air Buds
              </button>
              <button
                onClick={() => setActiveCategory("home-kitchen")}
                className={`text-sm font-medium hover:text-indigo-600 transition ${
                  activeCategory === "home-kitchen" ? "text-indigo-600 font-semibold" : "text-gray-600"
                }`}
              >
                Home & Kitchen
              </button>
              <button
                onClick={() => setActiveCategory("electronics")}
                className={`text-sm font-medium hover:text-indigo-600 transition ${
                  activeCategory === "electronics" ? "text-indigo-600 font-semibold" : "text-gray-600"
                }`}
              >
                Electronics
              </button>
            </nav>

            <div className="relative">
              <input
                type="text"
                placeholder="Search products..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 pr-4 py-2 border rounded-md w-64 focus:outline-none focus:ring-2 focus:ring-indigo-200"
              />
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5 absolute left-3 top-2.5 text-gray-400"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                />
              </svg>
            </div>
          </div>

          <button
            onClick={() => setIsCartOpen(!isCartOpen)}
            className="relative p-2 text-gray-600 hover:text-indigo-600 transition"
            aria-label="Open shopping cart"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"
              />
            </svg>
            {cart.length > 0 && (
              <span className="absolute -top-1 -right-1 bg-indigo-600 text-white text-xs w-5 h-5 flex items-center justify-center rounded-full">
                {cart.length}
              </span>
            )}
          </button>
        </div>
      </header>

      {/* Mobile Search Bar */}
      <div className="md:hidden px-4 py-3 bg-white shadow-sm">
        <div className="relative">
          <input
            type="text"
            placeholder="Search products..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-200"
          />
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 absolute left-3 top-2.5 text-gray-400"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
            />
          </svg>
        </div>
      </div>

      {/* Hero Section */}
      <section className="bg-gradient-to-r from-indigo-50 to-blue-50 py-16 mb-12">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-4xl md:text-5xl font-extrabold text-gray-900 mb-4">
            Premium Physical Products for Every Need
          </h1>
          <p className="text-lg md:text-xl text-gray-600 max-w-3xl mx-auto mb-8">
            Discover a curated collection of high-quality physical goods designed to elevate your daily life.
          </p>
          <a
            href="#products"
            className="inline-block px-8 py-3 bg-indigo-600 text-white font-medium rounded-md hover:bg-indigo-700 transition"
          >
            Browse Products
          </a>
        </div>
      </section>

      {/* Main Content */}
      <main className="container mx-auto px-4 pb-16" id="products">
        {/* Product Grid */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
          {filteredProducts.map((product) => (
            <div
              key={product.id}
              className="bg-white rounded-lg overflow-hidden shadow-md hover:shadow-xl transition transform hover:-translate-y-1"
            >
              <img
                src={product.image}
                alt={product.name}
                className="w-full h-48 object-cover"
              />
              <div className="p-6">
                <h3 className="text-lg font-semibold text-gray-800">{product.name}</h3>
                
                <div className="mt-2 flex items-center">
                  <span className="text-indigo-600 font-bold">Rs.{product.salePrice.toLocaleString()}</span>
                  {product.originalPrice > product.salePrice && (
                    <span className="ml-2 text-sm text-gray-500 line-through">Rs.{product.originalPrice.toLocaleString()}</span>
                  )}
                </div>
                
                <button
                  onClick={() => addToCart(product)}
                  className="mt-4 w-full py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition"
                >
                  Add to Cart
                </button>
              </div>
            </div>
          ))}
        </div>

        {filteredProducts.length === 0 && (
          <div className="text-center py-16">
            <p className="text-gray-600 text-lg">No products found matching your criteria.</p>
          </div>
        )}
      </main>

      {/* Footer */}
      <footer className="bg-white border-t mt-16">
        <div className="container mx-auto px-4 py-8">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="text-indigo-600 font-bold text-xl mb-4 md:mb-0">
              AJA Products
            </div>
            <div className="text-gray-600 text-sm">
              © {new Date().getFullYear()} AJA Products. All rights reserved.
            </div>
          </div>
        </div>
      </footer>

      {/* Shopping Cart Sidebar */}
      {isCartOpen && (
        <div className="fixed inset-0 z-50 flex justify-end">
          <div className="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm"></div>
          <div className="bg-white w-full max-w-md h-full shadow-xl transform transition-transform duration-300 ease-in-out cart-container">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold">Your Cart</h2>
                <button
                  onClick={() => setIsCartOpen(false)}
                  className="text-gray-500 hover:text-gray-700"
                  aria-label="Close cart"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-6 w-6"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M6 18L18 6M6 6l12 12"
                    />
                  </svg>
                </button>
              </div>

              {cart.length === 0 ? (
                <div className="text-center py-10">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-16 w-16 mx-auto text-gray-300"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={1.5}
                      d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"
                    />
                  </svg>
                  <p className="mt-4 text-gray-600">Your cart is empty</p>
                </div>
              ) : (
                <>
                  <div className="space-y-4 max-h-96 overflow-y-auto pr-2">
                    {cart.map((item) => (
                      <div
                        key={item.id}
                        className="flex items-center border-b pb-4"
                      >
                        <img
                          src={item.image}
                          alt={item.name}
                          className="w-16 h-16 object-cover rounded"
                        />
                        <div className="ml-4 flex-grow">
                          <h4 className="font-medium">{item.name}</h4>
                          <div className="flex items-center">
                            <span className="text-indigo-600 font-bold">Rs.{(item.price).toLocaleString()}</span>
                            {item.originalPrice > item.price && (
                              <span className="ml-2 text-sm text-gray-500 line-through">Rs.{item.originalPrice.toLocaleString()}</span>
                            )}
                          </div>
                        </div>
                        <div className="flex items-center">
                          <button
                            onClick={() => decreaseQuantity(item.id)}
                            className="px-2 py-1 text-gray-600"
                            aria-label="Decrease quantity"
                          >
                            -
                          </button>
                          <span className="mx-2 w-8 text-center">{item.quantity}</span>
                          <button
                            onClick={() => increaseQuantity(item.id)}
                            className="px-2 py-1 text-gray-600"
                            aria-label="Increase quantity"
                          >
                            +
                          </button>
                          <button
                            onClick={() => removeFromCart(item.id)}
                            className="ml-4 text-red-500"
                            aria-label="Remove from cart"
                          >
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              className="h-5 w-5"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                              />
                            </svg>
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="mt-6 pt-4 border-t">
                    <div className="flex justify-between mb-2">
                      <span>Subtotal:</span>
                      <span className="font-bold">Rs.{cartTotal.toLocaleString()}</span>
                    </div>
                    <div className="text-sm text-gray-600 mb-6">
                      Shipping and taxes calculated at checkout
                    </div>
                    <button className="w-full py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition">
                      Checkout
                    </button>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
